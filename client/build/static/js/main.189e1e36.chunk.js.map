{"version":3,"sources":["components/Tasks/TasksListRow/TasksListRow.module.scss","components/Tasks/PopupCreateTask/PopupCreateTask.module.scss","components/Tasks/TasksList/TasksList.module.scss","components/BoardContentContainer/BoardContentContainer.module.scss","components/UsersList/UsersList.module.scss","pages/Main/Main.module.scss","shared/components/Button/Button.module.scss","pages/ReduxBoard/ReduxBoard.module.scss","App.module.scss","pages/BothBoard/BothBoard.module.scss","core/enums.ts","components/BoardContentContainer/index.tsx","shared/components/Button/index.tsx","components/Tasks/PopupCreateTask/index.tsx","components/Tasks/TasksListRow/index.tsx","components/Tasks/TasksList/index.tsx","components/UsersList/index.tsx","services/redux/action-types.ts","pages/ReduxBoard/index.tsx","services/redux/board-service/action.ts","services/redux/users-servive/action.ts","services/mobx/board-service/index.ts","services/mobx/users-service/index.ts","pages/MobxBoard/index.tsx","pages/Main/index.tsx","services/redux/board-service/reducer.ts","services/redux/users-servive/reducer.ts","services/redux/index.ts","pages/BothBoard/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","TASK_STATUS","BoardContentContainer","children","styleType","className","cx","styles","main","main__redux","main__mobx","Button","title","clickHandler","disabled","onClick","observer","setIsShowAddTask","addTask","useState","name","setName","description","setDescription","date","setDate","kavabangaData","useMemo","id","Date","toLocaleString","status","OPEN","container","form","input","type","placeholder","value","onChange","e","target","actions","task","users","setUserForTask","setTaskStatus","currentTaskUserFullname","correctUser","find","user","firstName","lastName","setUserFullnameByTask","currentCoolStatus","IN_PROGRESS","DONE","setCoolTaskStatusText","row","row__cell","toLocaleDateString","cell__select","style","marginBottom","map","tasks","total","isShowAddTask","table","table__title","table__content","table__content_total","person","filter","length","GET_TASKS","ADD_TASK","SET_USER_FOR_TASK","SET_TASK_STATUS","GET_USERS","ReduxBoard","isShowBackButton","dispatch","useDispatch","useSelector","state","usersList","board","useEffect","a","axios","get","payload","data","console","log","history","go","taskId","userId","axiosPayload","post","response","storeBoard","makeAutoObservable","this","taskData","runInAction","push","taskIndex","findIndex","configure","enforceActions","storeUsers","makeObservable","observable","getUsers","flow","useHistory","getTasks","Main","content","options","initState","boardReducer","action","usersReducer","rootReducer","combineReducers","composeEnhancers","compose","store","createStore","applyMiddleware","thunk","logger","BothBoard","wrapper","App","path","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.189e1e36.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"TasksListRow_row__7mJML\",\"row__cell\":\"TasksListRow_row__cell__yilnJ\",\"cell__select\":\"TasksListRow_cell__select__10OM9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"PopupCreateTask_container__WU69X\",\"title\":\"PopupCreateTask_title__1UtNj\",\"form\":\"PopupCreateTask_form__3XTPm\",\"input\":\"PopupCreateTask_input__ox2f8\",\"actions\":\"PopupCreateTask_actions__2i1Bx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"TasksList_main__1XJPT\",\"table\":\"TasksList_table__3NuQK\",\"table__title\":\"TasksList_table__title__3ZK-X\",\"table__content\":\"TasksList_table__content__2sS-b\",\"table__content_total\":\"TasksList_table__content_total__2PLt4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"BoardContentContainer_main__3vASg\",\"main__redux\":\"BoardContentContainer_main__redux__pNO_x\",\"main__mobx\":\"BoardContentContainer_main__mobx__Bl2cq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"UsersList_main__9QxXk\",\"title\":\"UsersList_title__1n9mR\",\"person\":\"UsersList_person__3u39X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Main_content__2DiGO\",\"title\":\"Main_title__2BP-I\",\"options\":\"Main_options__2pqki\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Button_main__3pdfO\",\"jump\":\"Button_jump__2Vs5x\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ReduxBoard_wrapper__30lDj\",\"title\":\"ReduxBoard_title__1vTAd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"App_title__2oBiX\",\"link\":\"App_link__1t642\",\"container\":\"App_container__eSJ6i\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"BothBoard_wrapper__2yXrR\"};","export enum TASK_STATUS {\n\tOPEN = 1,\n\tIN_PROGRESS,\n\tDONE,\n}\n","import React, { FC, ReactNode } from 'react';\nimport cx from 'classnames';\nimport styles from './BoardContentContainer.module.scss';\n\ntype BoardContentContainerProps = {\n\tchildren: ReactNode;\n\tstyleType?: string;\n};\n\nconst BoardContentContainer: FC<BoardContentContainerProps> = ({ children, styleType }: BoardContentContainerProps) => {\n\treturn (\n\t\t<div\n\t\t\tclassName={cx(styles.main, {\n\t\t\t\t[styles.main__redux]: styleType === 'styleRedux',\n\t\t\t\t[styles.main__mobx]: styleType === 'styleMobx',\n\t\t\t})}\n\t\t>\n\t\t\t{children}\n\t\t</div>\n\t);\n};\n\nexport default BoardContentContainer;\n","import React, { FC } from 'react';\nimport styles from './Button.module.scss';\n\ntype ButtonProps = { title: string; clickHandler: () => void; disabled?: boolean };\n\nconst Button: FC<ButtonProps> = ({ title, clickHandler, disabled }: ButtonProps) => {\n\treturn (\n\t\t<button className={styles.main} onClick={clickHandler} disabled={disabled}>\n\t\t\t{title}\n\t\t</button>\n\t);\n};\n\nexport default Button;\n","import { observer } from 'mobx-react';\nimport React, { FC, useMemo, useState } from 'react';\nimport { TASK_STATUS } from '../../../core/enums';\nimport { Task } from '../../../services/redux/board-service/types';\nimport Button from '../../../shared/components/Button';\nimport styles from './PopupCreateTask.module.scss';\n\ntype PopupCreateTaskProps = {\n\tsetIsShowAddTask: React.Dispatch<React.SetStateAction<boolean>>;\n\taddTask: (taskData: Task) => void;\n};\n\nconst PopupCreateTask: FC<PopupCreateTaskProps> = ({ setIsShowAddTask, addTask }: PopupCreateTaskProps) => {\n\tconst [name, setName] = useState('');\n\tconst [description, setDescription] = useState('');\n\tconst [date, setDate] = useState('');\n\n\tconst kavabangaData = useMemo(() => {\n\t\tif (name && description && date)\n\t\t\treturn {\n\t\t\t\tid: new Date().toLocaleString(),\n\t\t\t\tname,\n\t\t\t\tdescription,\n\t\t\t\tdate: new Date(date),\n\t\t\t\tstatus: TASK_STATUS.OPEN,\n\t\t\t};\n\t\treturn null;\n\t}, [name, date, description]);\n\n\tconst submitClickHandler = () => {\n\t\tif (kavabangaData) {\n\t\t\taddTask(kavabangaData);\n\t\t\tsetIsShowAddTask(false);\n\t\t}\n\t};\n\n\treturn (\n\t\t<div className={styles.container}>\n\t\t\t<h2 className={styles.title}>Please, create your kavabanga</h2>\n\t\t\t<div className={styles.form}>\n\t\t\t\t<input\n\t\t\t\t\tclassName={styles.input}\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tplaceholder=\"Kavabanga name\"\n\t\t\t\t\tvalue={name}\n\t\t\t\t\tonChange={e => setName(e.target.value)}\n\t\t\t\t/>\n\t\t\t\t<input\n\t\t\t\t\tclassName={styles.input}\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tplaceholder=\"Kavabanga description\"\n\t\t\t\t\tvalue={description}\n\t\t\t\t\tonChange={e => setDescription(e.target.value)}\n\t\t\t\t/>\n\t\t\t\t<input\n\t\t\t\t\tclassName={styles.input}\n\t\t\t\t\ttype=\"date\"\n\t\t\t\t\tplaceholder=\"Kavabanga date\"\n\t\t\t\t\tvalue={date}\n\t\t\t\t\tonChange={e => setDate(e.target.value)}\n\t\t\t\t/>\n\t\t\t\t<div className={styles.actions}>\n\t\t\t\t\t<Button title=\"Submit\" clickHandler={submitClickHandler} disabled={!kavabangaData} />\n\t\t\t\t\t<Button title=\"Close\" clickHandler={() => setIsShowAddTask(false)} />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default observer(PopupCreateTask);\n","import React, { FC, useMemo } from 'react';\nimport cx from 'classnames';\nimport { observer } from 'mobx-react';\nimport { TASK_STATUS } from '../../../core/enums';\nimport { Task } from '../../../services/redux/board-service/types';\nimport { User } from '../../../services/redux/users-servive/types';\nimport styles from './TasksListRow.module.scss';\n\nconst setUserFullnameByTask = (task: Task, users: Array<User>): string | null => {\n\tconst correctUser = users.find(user => user.id === task.user);\n\tif (correctUser) return `${correctUser.firstName} ${correctUser.lastName}`;\n\treturn \"D'oh, here is nobody...\";\n};\n\nconst setCoolTaskStatusText = (task: Task): string | null => {\n\tswitch (task.status) {\n\t\tcase TASK_STATUS.OPEN:\n\t\t\treturn 'Take me, I should be done, mmmm...';\n\t\tcase TASK_STATUS.IN_PROGRESS:\n\t\t\treturn 'Keep it up, bro :)';\n\t\tcase TASK_STATUS.DONE:\n\t\t\treturn 'Gooooood boy';\n\t\tdefault:\n\t\t\treturn \"I'm so alone... Look at me...\";\n\t}\n};\n\ntype TasksListRowProps = {\n\ttask: Task;\n\tusers: Array<User>;\n\tsetUserForTask: (taskId: string, userId: string) => void;\n\tsetTaskStatus: (taskId: string, status: TASK_STATUS | string) => void;\n};\n\nconst TasksListRow: FC<TasksListRowProps> = ({ task, users, setUserForTask, setTaskStatus }: TasksListRowProps) => {\n\tconst currentTaskUserFullname = useMemo(() => setUserFullnameByTask(task, users), [task, users]);\n\tconst currentCoolStatus = useMemo(() => setCoolTaskStatusText(task), [task]);\n\n\tconst selectUserChangehandler = (e: React.ChangeEvent<HTMLSelectElement>): void => {\n\t\tsetUserForTask(task.id, e.target.value);\n\t};\n\n\tconst selectTaskStatusChangeHandler = (e: React.ChangeEvent<HTMLSelectElement>): void => {\n\t\tsetTaskStatus(task.id, e.target.value);\n\t};\n\n\treturn (\n\t\t<div className={styles.row}>\n\t\t\t<div className={styles.row__cell}>{task.name}</div>\n\t\t\t<div className={styles.row__cell}>{task.description}</div>\n\t\t\t<div className={styles.row__cell}>{new Date(task.date).toLocaleDateString()}</div>\n\t\t\t<div className={cx(styles.row__cell, styles.cell__select)}>\n\t\t\t\t<div style={{ marginBottom: '5px' }}>{currentTaskUserFullname}</div>\n\t\t\t\t<select value={task.user || ''} onChange={selectUserChangehandler}>\n\t\t\t\t\t<option value=\"\">Select user</option>\n\t\t\t\t\t{users.map(user => (\n\t\t\t\t\t\t<option key={user.id} value={user.id}>\n\t\t\t\t\t\t\t{`${user.firstName} ${user.lastName}`}\n\t\t\t\t\t\t</option>\n\t\t\t\t\t))}\n\t\t\t\t</select>\n\t\t\t</div>\n\t\t\t<div className={cx(styles.row__cell, styles.cell__select)}>\n\t\t\t\t<div style={{ marginBottom: '5px' }}>{currentCoolStatus}</div>\n\t\t\t\t<select value={task.status || ''} onChange={e => setTaskStatus(task.id, +e.target.value)}>\n\t\t\t\t\t<option value=\"\">Select status</option>\n\t\t\t\t\t<option value={TASK_STATUS.OPEN}>Open</option>\n\t\t\t\t\t<option value={TASK_STATUS.IN_PROGRESS}>In progress</option>\n\t\t\t\t\t<option value={TASK_STATUS.DONE}>Done</option>\n\t\t\t\t</select>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default observer(TasksListRow);\n","import React, { FC, useState } from 'react';\nimport { observer } from 'mobx-react';\nimport { TASK_STATUS } from '../../../core/enums';\nimport { Task } from '../../../services/redux/board-service/types';\nimport { User } from '../../../services/redux/users-servive/types';\nimport PopupCreateTask from '../PopupCreateTask';\nimport TasksListRow from '../TasksListRow';\nimport styles from './TasksList.module.scss';\nimport Button from '../../../shared/components/Button';\n\ntype TasksListProps = {\n\ttasks: Array<Task>;\n\tusers: Array<User>;\n\tsetUserForTask: (taskId: string, userId: string) => void;\n\tsetTaskStatus: (taskId: string, status: TASK_STATUS | string) => void;\n\taddTask: (task: Task) => void;\n\ttotal: number;\n};\n\nconst TasksList: FC<TasksListProps> = ({\n\ttasks,\n\tusers,\n\tsetUserForTask,\n\tsetTaskStatus,\n\taddTask,\n\ttotal,\n}: TasksListProps) => {\n\tconst [isShowAddTask, setIsShowAddTask] = useState(false);\n\n\treturn (\n\t\t<div className={styles.main}>\n\t\t\t<Button title=\"Add new kavabanga\" clickHandler={() => setIsShowAddTask(true)} />\n\t\t\t<div className={styles.table}>\n\t\t\t\t<h2 className={styles.table__title}>Kavabangas:</h2>\n\t\t\t\t<div className={styles.table__content}>\n\t\t\t\t\t{tasks.map(task => (\n\t\t\t\t\t\t<TasksListRow\n\t\t\t\t\t\t\tkey={task.id}\n\t\t\t\t\t\t\ttask={task}\n\t\t\t\t\t\t\tusers={users}\n\t\t\t\t\t\t\tsetUserForTask={setUserForTask}\n\t\t\t\t\t\t\tsetTaskStatus={setTaskStatus}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t\t\t<div className={styles.table__content_total}>Total: {total}</div>\n\t\t\t\t</div>\n\t\t\t\t{isShowAddTask && (\n\t\t\t\t\t<PopupCreateTask\n\t\t\t\t\t\tsetIsShowAddTask={setIsShowAddTask}\n\t\t\t\t\t\taddTask={addTask}\n\t\t\t\t\t\t// or you can just pass\n\t\t\t\t\t\t// addTask={storeBoard.addTask}\n\t\t\t\t\t\t// but you should configure boardStore in constructor as makeAutoObservable(this, {}, { autoBind: true }) for binding context\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\n// despite the parent component is observer the child component should be observer also, `case we mutate the store data\nexport default observer(TasksList);\n","import { observer } from 'mobx-react';\nimport React, { FC } from 'react';\nimport { Task } from '../../services/redux/board-service/types';\nimport { User } from '../../services/redux/users-servive/types';\nimport styles from './UsersList.module.scss';\n\ntype UsersListProps = {\n\tusers: Array<User>;\n\ttasks: Array<Task>;\n};\n\nconst UsersList: FC<UsersListProps> = ({ users, tasks }: UsersListProps) => {\n\treturn (\n\t\t<div className={styles.main}>\n\t\t\t<h2 className={styles.title}>Top of the top by kavabangas count:</h2>\n\t\t\t{users.map(user => (\n\t\t\t\t<div key={user.id} className={styles.person}>\n\t\t\t\t\t<span>\n\t\t\t\t\t\t{user.firstName} {user.lastName}\n\t\t\t\t\t</span>\n\t\t\t\t\t<span>{tasks.filter(task => task.user === user.id).length}</span>\n\t\t\t\t</div>\n\t\t\t))}\n\t\t</div>\n\t);\n};\n\n// despite the parent component is observer the child component should be observer also, `case we mutate the store data\nexport default observer(UsersList);\n","// board\nexport const GET_TASKS = 'GET_TASKS';\nexport const ADD_TASK = 'ADD_TASK';\nexport const SET_USER_FOR_TASK = 'SET_USER_FOR_TASK';\nexport const SET_TASK_STATUS = 'SET_TASK_STATUS';\n\n// users\nexport const GET_USERS = 'GET_USERS';\n","import React, { FC, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport BoardContentContainer from '../../components/BoardContentContainer';\nimport TasksList from '../../components/Tasks/TasksList';\nimport UsersList from '../../components/UsersList';\nimport Button from '../../shared/components/Button';\nimport { TASK_STATUS } from '../../core/enums';\nimport { Store } from '../../services/redux';\nimport { addTask, getTasks, setTaskStatus, setUserForTask } from '../../services/redux/board-service/action';\nimport { Task } from '../../services/redux/board-service/types';\nimport { getUsers } from '../../services/redux/users-servive/action';\nimport styles from './ReduxBoard.module.scss';\n\ntype ReduxBoardPrpops = { isShowBackButton?: boolean };\n\nconst ReduxBoard: FC<ReduxBoardPrpops> = ({ isShowBackButton }: ReduxBoardPrpops) => {\n\tconst dispatch = useDispatch();\n\tconst users = useSelector((state: Store) => state.users.usersList);\n\tconst tasks = useSelector((state: Store) => state.board.tasks);\n\tconst total = useSelector((state: Store) => state.board.tasks.length);\n\n\tconst dispatchSetUserForTask = (taskId: string, userId: string): void => {\n\t\tdispatch(setUserForTask(taskId, userId));\n\t};\n\n\tconst dispatchSetTaskStatus = (taskId: string, status: TASK_STATUS | string): void => {\n\t\tdispatch(setTaskStatus(taskId, status));\n\t};\n\tconst dispatchAddTask = (task: Task) => {\n\t\tdispatch(addTask(task));\n\t};\n\n\tuseEffect(() => {\n\t\tdispatch(getTasks());\n\t\tdispatch(getUsers());\n\t}, []);\n\n\treturn (\n\t\t<BoardContentContainer styleType=\"styleRedux\">\n\t\t\t{isShowBackButton && <Button title=\"Go back\" clickHandler={() => history.go(-1)} />}\n\t\t\t<h1 className={styles.title}>REDUX board</h1>\n\t\t\t<TasksList\n\t\t\t\ttasks={tasks}\n\t\t\t\tusers={users}\n\t\t\t\tsetUserForTask={dispatchSetUserForTask}\n\t\t\t\tsetTaskStatus={dispatchSetTaskStatus}\n\t\t\t\taddTask={dispatchAddTask}\n\t\t\t\ttotal={total}\n\t\t\t/>\n\t\t\t<UsersList tasks={tasks} users={users} />\n\t\t</BoardContentContainer>\n\t);\n};\n\nexport default ReduxBoard;\n","import { Dispatch } from 'redux';\nimport axios, { AxiosResponse } from 'axios';\nimport { ADD_TASK, GET_TASKS, SET_TASK_STATUS, SET_USER_FOR_TASK } from '../action-types';\nimport { Task } from './types';\nimport { TASK_STATUS } from '../../../core/enums';\n\nexport const getTasks =\n\t() =>\n\tasync (dispatch: Dispatch): Promise<void> => {\n\t\ttry {\n\t\t\tconst tasks = await axios.get('/api/get-tasks');\n\t\t\tdispatch({\n\t\t\t\ttype: GET_TASKS,\n\t\t\t\tpayload: tasks.data,\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t};\n\nexport const addTask =\n\t(task: Task) =>\n\tasync (dispatch: Dispatch): Promise<void> => {\n\t\tconst response: AxiosResponse<void> = await axios.post('/api/add-task', task);\n\t\tif (response.status === 200)\n\t\t\tdispatch({\n\t\t\t\ttype: ADD_TASK,\n\t\t\t\tpayload: task,\n\t\t\t});\n\t};\n\nexport const setUserForTask =\n\t(taskId: string, userId: string) =>\n\tasync (dispatch: Dispatch): Promise<void> => {\n\t\tconst axiosPayload = { taskId, userId: userId.length ? userId : null };\n\t\tconst response: AxiosResponse<Task> = await axios.post('/api/set-task-user', axiosPayload);\n\t\tdispatch({\n\t\t\ttype: SET_USER_FOR_TASK,\n\t\t\tpayload: response.data,\n\t\t});\n\t};\n\nexport const setTaskStatus =\n\t(taskId: string, status: TASK_STATUS | string) =>\n\tasync (dispatch: Dispatch): Promise<void> => {\n\t\tconst axiosPayload = { taskId, status: status || null };\n\t\tconst response: AxiosResponse<Task> = await axios.post('/api/set-task-status', axiosPayload);\n\t\tdispatch({\n\t\t\ttype: SET_TASK_STATUS,\n\t\t\tpayload: response.data,\n\t\t});\n\t};\n","import { Dispatch } from 'redux';\nimport axios from 'axios';\nimport { GET_USERS } from '../action-types';\n\nexport const getUsers =\n\t() =>\n\tasync (dispatch: Dispatch): Promise<void> => {\n\t\ttry {\n\t\t\tconst users = await axios.get('/api/get-users');\n\t\t\tdispatch({\n\t\t\t\ttype: GET_USERS,\n\t\t\t\tpayload: users.data,\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t};\n","import { makeAutoObservable, runInAction, observable } from 'mobx';\nimport axios, { AxiosResponse } from 'axios';\nimport { Task } from '../../redux/board-service/types';\nimport { TASK_STATUS } from '../../../core/enums';\n\nclass Board {\n\ttasks: Array<Task> = [];\n\n\tconstructor() {\n\t\tmakeAutoObservable(this);\n\t}\n\n\tasync getTasks() {\n\t\ttry {\n\t\t\tconst tasks = await axios.get('/api/get-tasks');\n\t\t\tthis.tasks = tasks.data;\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t}\n\n\t*addTask(taskData: Task) {\n\t\ttry {\n\t\t\tconst response: AxiosResponse<void> = yield axios.post('/api/add-task', taskData);\n\t\t\tif (response.status === 200)\n\t\t\t\trunInAction(() => {\n\t\t\t\t\tthis.tasks.push(taskData);\n\t\t\t\t});\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t}\n\n\t*setUserForTask(taskId: string, userId: string) {\n\t\ttry {\n\t\t\tconst axiosPayload = { taskId, userId: userId.length ? userId : null };\n\t\t\tconst response: AxiosResponse<Task> = yield axios.post('/api/set-task-user', axiosPayload);\n\t\t\tconst taskIndex = this.tasks.findIndex(task => task.id === response.data.id);\n\t\t\tif (taskIndex !== -1)\n\t\t\t\trunInAction(() => {\n\t\t\t\t\tthis.tasks[taskIndex] = response.data;\n\t\t\t\t});\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t}\n\n\t*setTaskStatus(taskId: string, status: TASK_STATUS | string) {\n\t\ttry {\n\t\t\tconsole.log(status);\n\t\t\tconst axiosPayload = { taskId, status: status || null };\n\t\t\tconst response: AxiosResponse<Task> = yield axios.post('/api/set-task-status', axiosPayload);\n\t\t\tconst taskIndex = this.tasks.findIndex(task => task.id === response.data.id);\n\t\t\tif (taskIndex !== -1)\n\t\t\t\trunInAction(() => {\n\t\t\t\t\tthis.tasks[taskIndex] = response.data;\n\t\t\t\t});\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t}\n\n\tget total() {\n\t\treturn this.tasks.length;\n\t}\n}\n\nconst storeBoard = new Board();\n\nexport default storeBoard;\n\n// LIKE FUNCTION STORE\n\n// type Store = { tasks: Array<Task> };\n\n// const initState: Store = {\n// \ttasks: [],\n// };\n\n// function storeBoardFunc(initState: Store) {\n// \treturn makeAutoObservable({\n// \t\ttasks: initState.tasks,\n\n// \t\tasync getTasks() {\n// \t\t\ttry {\n// \t\t\t\tconst tasks = await axios.get('/api/get-tasks');\n// \t\t\t\tthis.tasks = tasks.data;\n// \t\t\t} catch (error) {\n// \t\t\t\tconsole.log(error);\n// \t\t\t}\n// \t\t},\n\n// \t\t*addTask(taskData: Task) {\n// \t\t\ttry {\n// \t\t\t\tconst response: AxiosResponse<void> = yield axios.post('/api/add-task', taskData);\n// \t\t\t\tif (response.status === 200)\n// \t\t\t\t\trunInAction(() => {\n// \t\t\t\t\t\tthis.tasks.push(taskData);\n// \t\t\t\t\t});\n// \t\t\t} catch (error) {\n// \t\t\t\tconsole.log(error);\n// \t\t\t}\n// \t\t},\n\n// \t\t*setUserForTask(taskId: string, userId: string) {\n// \t\t\ttry {\n// \t\t\t\tconst axiosPayload = { taskId, userId };\n// \t\t\t\tconst response: AxiosResponse<Task> = yield axios.post('/api/set-task-user', axiosPayload);\n// \t\t\t\tconst taskIndex = this.tasks.findIndex(task => task.id === response.data.id);\n// \t\t\t\tif (taskIndex !== -1)\n// \t\t\t\t\trunInAction(() => {\n// \t\t\t\t\t\tthis.tasks[taskIndex] = response.data;\n// \t\t\t\t\t});\n// \t\t\t} catch (error) {\n// \t\t\t\tconsole.log(error);\n// \t\t\t}\n// \t\t},\n\n// \t\t*setTaskStatus(taskId: string, status: TASK_STATUS) {\n// \t\t\ttry {\n// \t\t\t\tconst axiosPayload = { taskId, status };\n// \t\t\t\tconst response: AxiosResponse<Task> = yield axios.post('/api/set-task-status', axiosPayload);\n// \t\t\t\tconst taskIndex = this.tasks.findIndex(task => task.id === response.data.id);\n// \t\t\t\tif (taskIndex !== -1)\n// \t\t\t\t\trunInAction(() => {\n// \t\t\t\t\t\tthis.tasks[taskIndex] = response.data;\n// \t\t\t\t\t});\n// \t\t\t} catch (error) {\n// \t\t\t\tconsole.log(error);\n// \t\t\t}\n// \t\t},\n\n// \t\tget total() {\n// \t\t\treturn this.tasks.length;\n// \t\t},\n// \t});\n// }\n\n// export default storeBoardFunc(initState);\n\n// LIKE OBSERVER STORE\n\n// const boardStoreObservable = observable({\n// \ttasks: [] as Array<Task>,\n// \tasync getTasks() {\n// \t\ttry {\n// \t\t\tconst tasks = await axios.get('/api/get-tasks');\n// \t\t\tthis.tasks = tasks.data;\n// \t\t} catch (error) {\n// \t\t\tconsole.log(error);\n// \t\t}\n// \t},\n\n// \t*addTask(taskData: Task) {\n// \t\ttry {\n// \t\t\tconst response: AxiosResponse<void> = yield axios.post('/api/add-task', taskData);\n// \t\t\tif (response.status === 200)\n// \t\t\t\trunInAction(() => {\n// \t\t\t\t\tthis.tasks.push(taskData);\n// \t\t\t\t});\n// \t\t} catch (error) {\n// \t\t\tconsole.log(error);\n// \t\t}\n// \t},\n\n// \t*setUserForTask(taskId: string, userId: string) {\n// \t\ttry {\n// \t\t\tconst axiosPayload = { taskId, userId };\n// \t\t\tconst response: AxiosResponse<Task> = yield axios.post('/api/set-task-user', axiosPayload);\n// \t\t\tconst taskIndex = this.tasks.findIndex(task => task.id === response.data.id);\n// \t\t\tif (taskIndex !== -1)\n// \t\t\t\trunInAction(() => {\n// \t\t\t\t\tthis.tasks[taskIndex] = response.data;\n// \t\t\t\t});\n// \t\t} catch (error) {\n// \t\t\tconsole.log(error);\n// \t\t}\n// \t},\n\n// \t*setTaskStatus(taskId: string, status: TASK_STATUS) {\n// \t\ttry {\n// \t\t\tconst axiosPayload = { taskId, status };\n// \t\t\tconst response: AxiosResponse<Task> = yield axios.post('/api/set-task-status', axiosPayload);\n// \t\t\tconst taskIndex = this.tasks.findIndex(task => task.id === response.data.id);\n// \t\t\tif (taskIndex !== -1)\n// \t\t\t\trunInAction(() => {\n// \t\t\t\t\tthis.tasks[taskIndex] = response.data;\n// \t\t\t\t});\n// \t\t} catch (error) {\n// \t\t\tconsole.log(error);\n// \t\t}\n// \t},\n\n// \tget total() {\n// \t\treturn this.tasks.length;\n// \t},\n// });\n\n// export default boardStoreObservable;\n","import { makeObservable, observable, flow, configure, runInAction } from 'mobx';\nimport axios, { AxiosResponse } from 'axios';\nimport { User } from '../../redux/users-servive/types';\n\n// like strict mode\nconfigure({ enforceActions: 'always' });\n\n// class\nclass Users {\n\tusersList: Array<User> = [];\n\n\tconstructor() {\n\t\tmakeObservable(this, { usersList: observable, getUsers: flow });\n\t}\n\n\t// flow\n\t*getUsers() {\n\t\ttry {\n\t\t\tconst users: AxiosResponse<Array<User>> = yield axios.get('/api/get-users');\n\t\t\trunInAction(() => {\n\t\t\t\tthis.usersList = users.data;\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t}\n}\n\nconst storeUsers = new Users();\nexport default storeUsers;\n","import React, { FC, useEffect } from 'react';\nimport { observer } from 'mobx-react';\nimport { useHistory } from 'react-router';\nimport TasksList from '../../components/Tasks/TasksList';\nimport storeBoard from '../../services/mobx/board-service';\nimport storeUsers from '../../services/mobx/users-service';\nimport { TASK_STATUS } from '../../core/enums';\nimport { Task } from '../../services/redux/board-service/types';\nimport BoardContentContainer from '../../components/BoardContentContainer';\nimport UsersList from '../../components/UsersList';\nimport Button from '../../shared/components/Button';\nimport styles from './MobxBoard.module.scss';\n\ntype MobxBoardProps = { isShowBackButton?: boolean };\n\nconst MobxBoard: FC<MobxBoardProps> = ({ isShowBackButton }: MobxBoardProps) => {\n\tconst history = useHistory();\n\n\tuseEffect(() => {\n\t\tstoreBoard.getTasks();\n\t\tstoreUsers.getUsers();\n\t}, []);\n\n\treturn (\n\t\t<BoardContentContainer styleType=\"styleMobx\">\n\t\t\t{isShowBackButton && <Button title=\"Go back\" clickHandler={() => history.go(-1)} />}\n\t\t\t<h1>MOBX board</h1>\n\t\t\t<TasksList\n\t\t\t\ttasks={storeBoard.tasks}\n\t\t\t\tusers={storeUsers.usersList}\n\t\t\t\tsetUserForTask={(taskId: string, userId: string) => storeBoard.setUserForTask(taskId, userId)}\n\t\t\t\tsetTaskStatus={(taskId: string, status: TASK_STATUS | string) =>\n\t\t\t\t\tstoreBoard.setTaskStatus(taskId, status)\n\t\t\t\t}\n\t\t\t\taddTask={(task: Task) => storeBoard.addTask(task)}\n\t\t\t\ttotal={storeBoard.total}\n\t\t\t/>\n\t\t\t<UsersList tasks={storeBoard.tasks} users={storeUsers.usersList} />\n\t\t</BoardContentContainer>\n\t);\n};\n\nexport default observer(MobxBoard);\n","import React, { FC } from 'react';\nimport { useHistory } from 'react-router';\nimport Button from '../../shared/components/Button';\nimport styles from './Main.module.scss';\n\nconst Main: FC = () => {\n\tconst history = useHistory();\n\n\treturn (\n\t\t<div className={styles.content}>\n\t\t\t<h1 className={styles.title}>Welcome to kavabangaBoard</h1>\n\t\t\t<div className={styles.options}>\n\t\t\t\t<Button title=\"Go to redux board\" clickHandler={() => history.push('/redux/board')} />\n\t\t\t\t<Button title=\"Go to mobx board\" clickHandler={() => history.push('/mobx/board')} />\n\t\t\t\t<Button title=\"Go to both boards\" clickHandler={() => history.push('/both-boards')} />\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default Main;\n","import { ADD_TASK, GET_TASKS, SET_TASK_STATUS, SET_USER_FOR_TASK } from '../action-types';\nimport { ActionsType, IBoardReducer, Task } from './types';\n\nconst initState: IBoardReducer = {\n\ttasks: [],\n};\n\nconst boardReducer = (state = initState, action: ActionsType): IBoardReducer => {\n\tconst { payload, type } = action;\n\tswitch (type) {\n\t\tcase GET_TASKS:\n\t\t\treturn { ...state, tasks: payload as Array<Task> };\n\n\t\tcase ADD_TASK:\n\t\t\treturn { ...state, tasks: [...state.tasks, payload as Task] };\n\n\t\tcase SET_USER_FOR_TASK:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\ttasks: state.tasks.map(task => (task.id === (payload as Task).id ? (payload as Task) : task)),\n\t\t\t};\n\n\t\tcase SET_TASK_STATUS:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\ttasks: state.tasks.map(task => (task.id === (payload as Task).id ? (payload as Task) : task)),\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport default boardReducer;\n","import { GET_USERS } from '../action-types';\nimport { ActionsType, IUsersReducer, User } from './types';\n\nconst initState: IUsersReducer = {\n\tusersList: [],\n};\n\nconst usersReducer = (state = initState, action: ActionsType): IUsersReducer => {\n\tconst { payload, type } = action;\n\tswitch (type) {\n\t\tcase GET_USERS:\n\t\t\treturn { ...state, usersList: payload as Array<User> };\n\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport default usersReducer;\n","import thunk from 'redux-thunk';\nimport logger from 'redux-logger';\nimport { applyMiddleware, combineReducers, compose, createStore } from 'redux';\nimport boardReducer from './board-service/reducer';\nimport usersReducer from './users-servive/reducer';\n\nconst rootReducer = combineReducers({\n\tboard: boardReducer,\n\tusers: usersReducer,\n});\n\nconst composeEnhancers = compose;\n\nexport const store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk, logger)));\n\nexport type Store = ReturnType<typeof rootReducer>;\n","import React, { FC } from 'react';\nimport { Provider } from 'react-redux';\nimport { useHistory } from 'react-router';\nimport { store } from '../../services/redux';\nimport Button from '../../shared/components/Button';\nimport MobxBoard from '../MobxBoard';\nimport ReduxBoard from '../ReduxBoard';\nimport styles from './BothBoard.module.scss';\n\nconst BothBoard: FC = () => {\n\tconst history = useHistory();\n\treturn (\n\t\t<div className={styles.wrapper}>\n\t\t\t<Button title=\"Go back\" clickHandler={() => history.go(-1)} />\n\t\t\t<MobxBoard />\n\t\t\t<Provider store={store}>\n\t\t\t\t<ReduxBoard />\n\t\t\t</Provider>\n\t\t</div>\n\t);\n};\n\nexport default BothBoard;\n","import React, { FC } from 'react';\nimport { Route, Switch } from 'react-router';\nimport { Provider } from 'react-redux';\nimport ReduxBoard from './pages/ReduxBoard';\nimport MobxBoard from './pages/MobxBoard';\nimport Main from './pages/Main';\nimport { store } from './services/redux';\nimport styles from './App.module.scss';\nimport BothBoard from './pages/BothBoard';\n\nconst App: FC = () => {\n\treturn (\n\t\t<div className={styles.container}>\n\t\t\t<Switch>\n\t\t\t\t<Route path=\"/\" exact component={Main} />\n\t\t\t\t<Route path=\"/redux\">\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Provider store={store}>\n\t\t\t\t\t\t\t<Route exact path=\"/redux/board\">\n\t\t\t\t\t\t\t\t<ReduxBoard isShowBackButton />\n\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t</Provider>\n\t\t\t\t\t</Switch>\n\t\t\t\t</Route>\n\t\t\t\t<Route path=\"/mobx\">\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route exact path=\"/mobx/board\">\n\t\t\t\t\t\t\t<MobxBoard isShowBackButton />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t</Switch>\n\t\t\t\t</Route>\n\t\t\t\t<Route path=\"/both-boards\" component={BothBoard} />\n\t\t\t\t<Route component={() => <div>Not found</div>} />\n\t\t\t</Switch>\n\t\t</div>\n\t);\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n\tif (onPerfEntry && onPerfEntry instanceof Function) {\n\t\timport('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n\t\t\tgetCLS(onPerfEntry);\n\t\t\tgetFID(onPerfEntry);\n\t\t\tgetFCP(onPerfEntry);\n\t\t\tgetLCP(onPerfEntry);\n\t\t\tgetTTFB(onPerfEntry);\n\t\t});\n\t}\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './index.module.scss';\n\nReactDOM.render(\n\t<Router>\n\t\t<App />\n\t</Router>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}